package solutions;

/**
 * @author :DengSiYuan
 * @date :2021/4/21 9:57
 * @desc : 91.解码方法
 * 【题目】
 *      一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 *          'A' -> 1
 *          'B' -> 2
 *          ...
 *          'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 *      "AAJF" ，将消息分组为 (1 1 10 6)
 *      "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * 【示例】
 *      示例 1：
 *          输入：s = "12"
 *          输出：2
 *          解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 *      示例 2：
 *          输入：s = "226"
 *          输出：3
 *          解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 *      示例 3：
 *          输入：s = "0"
 *          输出：0
 *          解释：没有字符映射到以 0 开头的数字。
 *          含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 *          由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 *      示例 4：
 *
 *          输入：s = "06"
 *          输出：0
 *          解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
 * 【提示】
 *      1、1 <= s.length <= 100
 *      2、s 只包含数字，并且可能包含前导零。
 */
public class DecodeWays {

    /**
     * 动态规划
     *      第一种情况是我们使用了一个字符，即s[i]进行解码，那么只要 s[i]!=0，它就可以被解码成A∼I中的某个字母。
     *      由于剩余的前i−1个字符的解码方法数为fi−1,因此我们可以写出状态转移方程：
     *          fi = fi-1, \quad 其中s[i]!=0
     *      第二种情况是我们使用了两个字符，即s[i-1]和s[i]进行编码。与第一种情况类似，s[i−1]不能等于0，并且s[i−1]和s[i]组成的
     *      整数必须小于等于 26，这样它们就可以被解码成 J∼Z 中的某个字母。由于剩余的前i−2个字符的解码方法数为 fi−2，
     *      因此我们可以写出状态转移方程：
     *          fi = fi-2,其中s[i-1]!=0并且t s[i-1]+s[i]<=26
     *      需要注意的是，只有当i>1时才能进行转移，否则s[i−1]不存在。
     *      将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到fi的值。在动态规划完成后，最终的答案即为fn.
     *      动态规划的边界条件为：
     *          f0 = 1
     */
    public int numDecodings(String s) {

        int n = s.length();
        // a = f[i-2], b = f[i-1], c=f[i]
        int a = 0, b = 1, c = 0;
        for (int i = 1; i <= n; ++i) {
            c = 0;
            if (s.charAt(i - 1) != '0') {
                c += b;
            }
            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26)) {
                c += a;
            }
            a = b;
            b = c;
        }
        return c;

    }

}
