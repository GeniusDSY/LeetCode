package sword_finger_offer;

/**
 * @author :DengSiYuan
 * @date :2020/2/21 15:54
 * @desc : 面试题10- II. 青蛙跳台阶问题
 * 【题目】
 *      一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
 *      答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 * 【示例 】
 *      输入：n = 2
 *      输出：2
 *
 *      输入：n = 7
 *      输出：21
 * 【提示】
 *      0 <= n <= 100
 */
public class NumWays {

    /**
     * 【解法】     递归
     *      设跳上 n 级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶。
     *          1、当为1级台阶： 剩n-1个台阶，此情况共有 f(n-1)种跳法；
     *          2、当为2级台阶： 剩n-2个台阶，此情况共有 f(n-2)种跳法。
     * 【解题思路】
     * 斐波那契数列的定义是f(n+1)=f(n)+f(n−1)，生成第n项的做法有以下几种：
     *      1、递归法：
     *          原理：把 f(n)问题的计算拆分成f(n-1)和f(n-2)两个子问题的计算，并递归，以f(0)和f(1)终止条件。
     *          缺点： 大量重复的递归计算，例如f(n)和f(n−1)两者向下递归都需要计算f(n−2)的值。
     *      2、记忆化递归法：
     *          原理： 在递归法的基础上，新建一个长度为n的数组，用于在递归时存储f(0)至f(n)的数字值，第二次之后遇到这些数字则直接取用，避免了重复的递归计算。
     *          缺点： 记忆化存储需要使用O(N)的额外空间。
     *      3、动态规划：
     *          原理： 以斐波那契数列性质f(n+1)=f(n)+f(n−1)为转移方程。
     *          从计算效率、空间复杂度上看，动态规划是本题的最佳解法。
     * 【复杂度分析】
     *      时间复杂度O(N)：计算f(n)需循环n次，每轮循环内计算操作使用O(1) 。
     *      空间复杂度O(1)：几个标志变量使用常数大小的额外空间。
     */
    public int numWays(int n) {
            int a = 1, b = 1, sum;
            for(int i = 0; i < n; i++){
                sum = (a + b) % 1000000007;
                a = b;
                b = sum;
            }
            return a;
        }
}
